#!/usr/bin/env python3

from subprocess import check_output, run
from termcolor import colored
from pathlib import Path
import requests
import hashlib
import yaml
import json
import sys


with open(f'{str(Path.home())}/.config/impulse/config.yaml') as f:
    config = yaml.load(f, Loader=yaml.FullLoader)

def download_file(url, path, dohash):
    local_filename = url.split('/')[-1]
    with requests.get(url, stream=True) as r:
        r.raise_for_status()
        sha = hashlib.sha256()
        with open(f'{path}{local_filename}', 'wb+') as f:
            for chunk in r.iter_content(chunk_size=8192):
                if chunk:
                    f.write(chunk)
                    sha.update(chunk)
        if dohash:
            print(f"sha256sum: {sha.hexdigest()}")
    
    return local_filename


def install_package(name):
    run(["sudo", "mkdir", f"/tmp/{name}"])
    print("Extracting archive...")
    extract = run(["sudo", "tar", "-xvf", f"/tmp/{name}.tar.gz", "-C", f"/tmp/{name}"])
    extract_status = extract.returncode
    if extract_status:
        print(colored("Error extracting archive!", 'red'))
        exit()
    else:
        print(colored("Extracted!", 'green'))

    dir_ = check_output(["ls", f"/tmp/{name}/"])
    view_diff = input("View impulse.build diff? [y/n] ")
    if view_diff == "y":
        diff = run(["less", f"/tmp/{name}/{dir_.decode('ascii').strip()}/impulse.build"])
        diff_status = diff.returncode
        if diff_status:
            print(colored("Installation file doesn't exist!", 'red'))
            exit()
        else:
            pass

    continue_install = input("Continue install? [y/n] ")
    if continue_install == "y":
        install = run(["sudo", "sh", f"/tmp/{name}/{dir_.decode('ascii').strip()}/impulse.build"])
        install_status = install.returncode
        if install_status:
            print(colored("Installation failed!", 'red'))
        else:
            print(colored("Installation complete!", 'green'))

def download_package(url, name, dohash): 
    print(f"Downloading {name} from {url}")
    download_file(f"{url}{name}.tar.gz", "/tmp/", True)
    print(colored(f"Done downloading {name}!", 'green'))
    install_prompt = input(f"Do you want to install {name}? [y/n] ")
    if install_prompt == "y":
        install_package(name)

def download_list(url): 
    print(f"Downloading list from {url}")
    download_file(f"{url}list.json", f'{str(Path.home())}{config["local_path"]}', False)
    print(colored("Done downloading list", 'green'))


def search_list(term):
    with open(f"{str(Path.home())}{config['local_path']}list.json") as json_file:
        data = json.load(json_file)
        if term in data:
            print(data[term]["name"])
            print(f'-- {data[term]["desc"]}')


if sys.argv[1] == "-U":
   download_list(config["upstream"]) 

if sys.argv[1] == "-S":
    download_package(config["upstream"], sys.argv[2], True)

if sys.argv[1] == "-Ss":
    search_list(sys.argv[2])

